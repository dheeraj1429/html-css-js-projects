!(function (e) {
    "use strict";
    const t = {};
    let n,
        i,
        o,
        s,
        a,
        l = 0,
        r = -1;
    const c = function (e) {
            throw new Error(e);
        },
        d = function (e, t) {
            if (t && t.elements) {
                if ("many" === t.elements || t.elements >= 2) return (i = document.querySelectorAll(`${e}`));
                if ("one" === t.elements || 1 === t.elements || "once" === t.element) return (i = document.querySelector(`${e}`));
            }
            return (i = document.querySelector(`${e}`));
        };
    (t.addDomStyle = function (e, t) {
        const n = d(e, t);
        n || c("DOM elements is not find"), delete t.elements;
        const i = function (e) {
            for (const n in t) e.style[`${n}`] = `${t[n]}`;
        };
        void 0 === n.length
            ? i(n)
            : n.forEach((e, t) => {
                  i(e);
              });
    }),
        (t.textAnimation = function (e, t) {
            const n = d(e, t);
            n || c("DOM elements is not find"),
                (n.innerHTML = (function (e) {
                    return e.textContent.replace(/\S/g, "<span class='letter'>$&</span>");
                })(n));
            let i = setInterval(() => {
                !(function (e) {
                    const t = document.querySelectorAll(".letter");
                    t[l].classList[`${e}`]("fade"), ++l !== t.length || clearInterval(i);
                })("add");
            }, 50);
        });
    const m = function (e, t) {
            return new IntersectionObserver(function (t, n) {
                t.forEach((t) => {
                    e(t);
                });
            }, t);
        },
        f = function (e, t, n, i) {
            const o = e.target;
            e.isIntersecting || (o.classList.add(`${n}`), o.classList.remove(`${i}`)),
                e.isIntersecting && ((o.style.transition = "all 0.5s ease"), o.classList.add(`${i}`), o.classList.remove(`${n}`));
        };
    t.animation = function (e, t) {
        const i = d(e, t);
        (i && 0 !== i.length) || c('"DOM elements is not find"');
        const o = (function (e) {
            return { root: null, threshold: 0, rootMargin: `${e.rootMargin}px` };
        })(t);
        "slideUp" === t.slide || "top" === t.slide
            ? (n = m((e) => {
                  f(e, 0, "fade_down", "fade_up");
              }, o))
            : "slideRight" === t.slide || "right" === t.slide
            ? (n = m((e) => {
                  f(e, 0, "fade_right", "fade_center");
              }, o))
            : "slideDown" === t.slide || "down" === t.slide
            ? (n = m((e) => {
                  f(e, 0, "fade_down_al", "fade_center_al");
              }, o))
            : "slideLeft" === t.slide || "left" === t.slide
            ? (n = m((e) => {
                  f(e, 0, "fade_slide_left", "fade_center");
              }, o))
            : "fade-zoom" === t.zoom || "zoom" === t.zoom
            ? (n = m((e) => {
                  f(e, 0, "zoom_hide", "zoom_none");
              }, o))
            : "zoom-reverse" === t.zoom
            ? (n = m((e) => {
                  f(e, 0, "zoom_reverse", "zoom_none");
              }, o))
            : "fade" === t.zoom &&
              (n = m((e) => {
                  f(e, 0, "zoom-fade", "zoom_none");
              }, o)),
            (function (e, t) {
                void 0 === e.length
                    ? t.observe(e)
                    : e.forEach((e) => {
                          t.observe(e);
                      });
            })(i, n);
    };
    const u = function (e, t) {
        t.toogleClass && (e.classList.contains(t.toogleClass) ? e.classList.remove(t.toogleClass) : e.classList.add(t.toogleClass));
    };
    (t.toggle = function (e, t) {
        const n = d(e);
        if ((n || c("DOM elements is not find"), t.clickTarget)) {
            const e = d(t.clickTarget, t);
            void 0 === e.length
                ? e.addEventListener("click", function () {
                      u(n, t);
                  })
                : e.forEach((e, i, o) => {
                      e.addEventListener("click", function () {
                          u(n, t);
                      });
                  });
        }
        u(n, t);
    }),
        (t.mouse = function (t, n) {
            const i = d(t, n);
            i || c("DOM elements is not find");
            const s = function (t, n) {
                e.setTimeout(function () {
                    t.classList.remove("animated", "infinite", n);
                }, 3e3);
            };
            void 0 === i.length
                ? i.addEventListener(n.event ? n.event : "mouseenter", function () {
                      (o = i.getAttribute("data-animation")), i.classList.add("animated", "infinite", o), s(i, o);
                  })
                : i.forEach((e, t, i) => {
                      e.addEventListener(n.event ? n.event : "mouseenter", function (e) {
                          (o = e.target.getAttribute("data-animation")), e.target.classList.add("animated", "infinite", o), s(e.target, o);
                      });
                  });
        });
    const g = function (e, t) {
        r < e.strings.length - 1 ? r++ : (r = 0), (t.textContent = `. ${e.strings[r]}`);
        const n = [];
        e.colors.forEach((e, t, i) => {
            const o = e.split("");
            "#" !== o[0] && "r" !== o[0] && "g" !== o[1] && "b" !== o[2]
                ? n.push(`#${o.join("")}`)
                : ("r" === o[0] && "g" === o[1] && o[2], n.push(e));
        }),
            (t.style.color = `${n[r]}`);
    };
    (t.textSlideUp = function (e, t) {
        const n = d(e, t);
        console.log(t), n || c("DOM elements is not find"), (n.textContent = "");
        const i = document.createElement("div");
        if (((i.className = "text-animation-wrapper-div"), t.wrapperStyle && Object.keys(t.wrapperStyle).length > 0))
            for (const e in t.wrapperStyle) i.style[`${e}`] = t.wrapperStyle[`${e}`];
        if (void 0 === n.length) {
            let e = n.cloneNode(!0);
            i.appendChild(e);
        }
        n.innerHTML = i.outerHTML;
        const o = d(".text-animation-wrapper-div .slidUp-animation");
        o.classList.add("animated"),
            t.animation ? o.classList.add(`${t.animation}`) : o.classList.add(`${t.medium}`),
            o.addEventListener("webkitAnimationIteration", function () {
                g(t, o);
            }),
            o.addEventListener("animationiteration", function () {
                g(t, o);
            });
    }),
        (t.animate = function (e, t) {
            return (s = d(e, t)) || c("DOM elements is not find"), this;
        });
    t.add = function (e) {
        return (a = document.createElement("div")).classList.add(e.class, "animated"), console.log(a), this;
    };
    const h = function (e, t) {
            e.class && t.setAttribute("class", e.class);
        },
        p = function (e, t) {
            e.id && t.setAttribute("id", e.id);
        },
        v = function (e, t) {
            e.textContent && (t.textContent = e.textContent);
        },
        L = function (e, t) {
            e.dataAttribute &&
                e.dataAttribute.forEach((e, n, i) => {
                    for (const n in e) t.setAttribute(`data-${n}`, `${e[n].trim()}`);
                });
        },
        E = function (e, t) {
            const n = document.createElement("a");
            n.href = e.link;
            const i = document.createElement(t);
            return h(e, i), p(e, i), v(e, i), L(e, i), n.append(i), n;
        };
    t.CreateElements = function (e, t, n) {
        const i = d(e);
        i || c("DOM elements is not find");
        let o = document.createElement(t);
        h(n, o),
            p(n, o),
            v(n, o),
            L(n, o),
            n.link && ("a" === t ? o.setAttribute("href", n.link) : (o = E(n, t))),
            i.appendChild(o),
            n.parentInnerElements &&
                n.parentInnerElements.forEach((e, t, n) => {
                    0 === Object.keys(e).length && c("inner elements array is empty"), e.element || c("DOM element tag name is required");
                    let o = document.createElement(e.element);
                    h(e, o),
                        p(e, o),
                        v(e, o),
                        L(e, o),
                        e.link && ("a" === e.element ? o.setAttribute("href", e.link) : (o = E(e, e.element))),
                        i.appendChild(o);
                });
    };
    void 0 === e.livJs && (e.livJs = t);
})(window);
